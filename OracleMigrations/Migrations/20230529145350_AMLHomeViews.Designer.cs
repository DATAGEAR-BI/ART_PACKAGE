// <auto-generated />
using System;
using ART_PACKAGE.Areas.Identity.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Oracle.EntityFrameworkCore.Metadata;

#nullable disable

namespace OracleMigrations.Migrations
{
    [DbContext(typeof(AuthContext))]
    [Migration("20230529145350_AMLHomeViews")]
    partial class AMLHomeViews
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            OracleModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ART_PACKAGE.Areas.Identity.Data.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("NVARCHAR2(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("NUMBER(10)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("NVARCHAR2(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("NUMBER(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("NUMBER(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TIMESTAMP(7) WITH TIME ZONE");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("NVARCHAR2(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("NVARCHAR2(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("NUMBER(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("NUMBER(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("NVARCHAR2(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("\"NormalizedUserName\" IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5f782cb4-decf-47f9-a119-99b0caa5ab24",
                            Email = "Art_Admin@datagearbi.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ART_ADMIN@DATAGEARBI.COM",
                            NormalizedUserName = "ART_ADMIN@DATAGEARBI.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBUj4IR24S+8IRg4Z0Lm/Ee1NAcaQ/tCoXgAmR34HRdY03oDEoVH3fFK2q1KBNs5aw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7d91c942-33f1-4bab-8210-720c3bbc1d63",
                            TwoFactorEnabled = false,
                            UserName = "Art_Admin@datagearbi.com"
                        });
                });

            modelBuilder.Entity("ART_PACKAGE.Areas.Identity.Data.ArtSavedCustomReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<string>("Description")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<int>("Schema")
                        .HasColumnType("NUMBER(10)");

                    b.Property<string>("Table")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ArtSavedCustomReport", (string)null);
                });

            modelBuilder.Entity("ART_PACKAGE.Areas.Identity.Data.ArtSavedReportsChart", b =>
                {
                    b.Property<int>("ReportId")
                        .HasColumnType("NUMBER(10)");

                    b.Property<string>("Column")
                        .HasColumnType("NVARCHAR2(450)");

                    b.Property<int>("Type")
                        .HasColumnType("NUMBER(10)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.HasKey("ReportId", "Column", "Type");

                    b.ToTable("ArtSavedReportsChart", (string)null);
                });

            modelBuilder.Entity("ART_PACKAGE.Areas.Identity.Data.ArtSavedReportsColumns", b =>
                {
                    b.Property<int>("ReportId")
                        .HasColumnType("NUMBER(10)");

                    b.Property<string>("Column")
                        .HasColumnType("NVARCHAR2(450)");

                    b.HasKey("ReportId", "Column");

                    b.ToTable("ArtSavedReportsColumns");
                });

            modelBuilder.Entity("Data.DGCMGMT.ArtHomeCasesDate", b =>
                {
                    b.Property<decimal?>("Day")
                        .HasColumnType("int")
                        .HasColumnName("DAY");

                    b.Property<string>("Month")
                        .IsRequired()
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(36)")
                        .HasColumnName("MONTH");

                    b.Property<decimal?>("NumberOfCases")
                        .HasColumnType("int")
                        .HasColumnName("NUMBER_OF_CASES");

                    b.Property<decimal?>("Year")
                        .HasColumnType("int")
                        .HasColumnName("YEAR");

                    b.ToView("ART_HOME_CASES_DATE", "ART_DB");
                });

            modelBuilder.Entity("Data.DGCMGMT.ArtHomeCasesStatus", b =>
                {
                    b.Property<string>("CaseStatus")
                        .HasMaxLength(9)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(9)")
                        .HasColumnName("CASE_STATUS");

                    b.Property<decimal?>("NumberOfCases")
                        .HasColumnType("int")
                        .HasColumnName("NUMBER_OF_CASES");

                    b.ToView("ART_HOME_CASES_STATUS", "ART_DB");
                });

            modelBuilder.Entity("Data.DGCMGMT.ArtHomeCasesType", b =>
                {
                    b.Property<string>("CaseType")
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(400)")
                        .HasColumnName("CASE_TYPE");

                    b.Property<decimal?>("NumberOfCases")
                        .HasColumnType("int")
                        .HasColumnName("NUMBER_OF_CASES");

                    b.ToView("ART_HOME_CASES_TYPES", "ART_DB");
                });

            modelBuilder.Entity("Data.FCF71.ArtHomeAlertsPerDate", b =>
                {
                    b.Property<int?>("Day")
                        .HasColumnType("NUMBER(10)");

                    b.Property<string>("Month")
                        .HasMaxLength(4000)
                        .HasColumnType("NCLOB");

                    b.Property<int?>("NumberOfAlerts")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("Number_Of_ALerts");

                    b.Property<int?>("Year")
                        .HasColumnType("NUMBER(10)");

                    b.ToView("ART_HOME_ALERTS_PER_DATE", "ART_DB");
                });

            modelBuilder.Entity("Data.FCF71.ArtHomeAlertsPerStatus", b =>
                {
                    b.Property<string>("AlertStatus")
                        .HasMaxLength(100)
                        .HasColumnType("NVARCHAR2(100)")
                        .HasColumnName("ALERT_STATUS");

                    b.Property<int?>("AlertsCount")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("Alerts_Count");

                    b.ToView("ART_HOME_ALERTS_PER_STATUS", "ART_DB");
                });

            modelBuilder.Entity("Data.FCF71.ArtHomeNumberOfAccount", b =>
                {
                    b.Property<int?>("NumberOfAccounts")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("Number_Of_Accounts");

                    b.ToView("ART_HOME_Number_Of_Accounts", "ART_DB");
                });

            modelBuilder.Entity("Data.FCF71.ArtHomeNumberOfCustomer", b =>
                {
                    b.Property<int?>("NumberOfCustomers")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("Number_Of_Customers");

                    b.ToView("ART_HOME_NUMBER_OF_CUSTOMERS", "ART_DB");
                });

            modelBuilder.Entity("Data.FCF71.ArtHomeNumberOfHighRiskCustomer", b =>
                {
                    b.Property<int?>("NumberOfHighRiskCustomers")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("Number_Of_High_Risk_Customers");

                    b.ToView("ART_HOME_NUMBER_OF_High_Risk_CUSTOMERS", "ART_DB");
                });

            modelBuilder.Entity("Data.FCF71.ArtHomeNumberOfPepCustomer", b =>
                {
                    b.Property<int?>("NumberOfPepCustomers")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("Number_Of_PEP_Customers");

                    b.ToView("ART_HOME_NUMBER_OF_PEP_CUSTOMERS", "ART_DB");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("NVARCHAR2(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("NVARCHAR2(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("NVARCHAR2(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("\"NormalizedName\" IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "e60411ee-1127-4f5e-8f03-367ef13017a6",
                            ConcurrencyStamp = "b5911f98-3cc2-4510-b1be-ef0ca16cec98",
                            Name = "Home",
                            NormalizedName = "HOME"
                        },
                        new
                        {
                            Id = "83393df2-1bfa-471d-9a8a-8bf7c4b3f112",
                            ConcurrencyStamp = "064871bf-fddc-453c-a3df-428274f803a4",
                            Name = "CutomReport",
                            NormalizedName = "CUTOMREPORT"
                        },
                        new
                        {
                            Id = "ae3a9d7a-5adf-4cd9-85c4-517e59d08513",
                            ConcurrencyStamp = "f4fda307-d637-4a5e-92b6-3f411f9c8332",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("NVARCHAR2(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("NVARCHAR2(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("NVARCHAR2(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("NVARCHAR2(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            RoleId = "ae3a9d7a-5adf-4cd9-85c4-517e59d08513"
                        },
                        new
                        {
                            UserId = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            RoleId = "83393df2-1bfa-471d-9a8a-8bf7c4b3f112"
                        },
                        new
                        {
                            UserId = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            RoleId = "e60411ee-1127-4f5e-8f03-367ef13017a6"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("NVARCHAR2(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("NVARCHAR2(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("NVARCHAR2(128)");

                    b.Property<string>("Value")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ART_PACKAGE.Areas.Identity.Data.ArtSavedCustomReport", b =>
                {
                    b.HasOne("ART_PACKAGE.Areas.Identity.Data.AppUser", "User")
                        .WithMany("Reports")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ART_PACKAGE.Areas.Identity.Data.ArtSavedReportsChart", b =>
                {
                    b.HasOne("ART_PACKAGE.Areas.Identity.Data.ArtSavedCustomReport", "Report")
                        .WithMany("Charts")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Report");
                });

            modelBuilder.Entity("ART_PACKAGE.Areas.Identity.Data.ArtSavedReportsColumns", b =>
                {
                    b.HasOne("ART_PACKAGE.Areas.Identity.Data.ArtSavedCustomReport", "Report")
                        .WithMany("Columns")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Report");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ART_PACKAGE.Areas.Identity.Data.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ART_PACKAGE.Areas.Identity.Data.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ART_PACKAGE.Areas.Identity.Data.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ART_PACKAGE.Areas.Identity.Data.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ART_PACKAGE.Areas.Identity.Data.AppUser", b =>
                {
                    b.Navigation("Reports");
                });

            modelBuilder.Entity("ART_PACKAGE.Areas.Identity.Data.ArtSavedCustomReport", b =>
                {
                    b.Navigation("Charts");

                    b.Navigation("Columns");
                });
#pragma warning restore 612, 618
        }
    }
}
