// <auto-generated />
using System;
using ART_PACKAGE.Areas.Identity.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Oracle.EntityFrameworkCore.Metadata;

#nullable disable

namespace OracleMigrations.Migrations
{
    [DbContext(typeof(AuthContext))]
    [Migration("20230612114515_AMLReports")]
    partial class AMLReports
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("ART")
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            OracleModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ART_PACKAGE.Areas.Identity.Data.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("NVARCHAR2(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("NUMBER(10)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("NVARCHAR2(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("NUMBER(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("NUMBER(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TIMESTAMP(7) WITH TIME ZONE");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("NVARCHAR2(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("NVARCHAR2(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("NUMBER(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("NUMBER(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("NVARCHAR2(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("\"NormalizedUserName\" IS NOT NULL");

                    b.ToTable("AspNetUsers", "ART");

                    b.HasData(
                        new
                        {
                            Id = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "73aa8347-63f2-42f7-86e2-c1b27a7089ae",
                            Email = "Art_Admin@datagearbi.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ART_ADMIN@DATAGEARBI.COM",
                            NormalizedUserName = "ART_ADMIN@DATAGEARBI.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAELcL/5yX1j5YPX4FIQiotmPBANyAk04OAnuilCbVS11ckOknj5P7jEOFTMKeAaWFEA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0f5718c5-177d-434d-aa57-8f15fd0c49e1",
                            TwoFactorEnabled = false,
                            UserName = "Art_Admin@datagearbi.com"
                        });
                });

            modelBuilder.Entity("ART_PACKAGE.Areas.Identity.Data.ArtSavedCustomReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<string>("Description")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<int>("Schema")
                        .HasColumnType("NUMBER(10)");

                    b.Property<string>("Table")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ArtSavedCustomReport", "ART");
                });

            modelBuilder.Entity("ART_PACKAGE.Areas.Identity.Data.ArtSavedReportsChart", b =>
                {
                    b.Property<int>("ReportId")
                        .HasColumnType("NUMBER(10)");

                    b.Property<string>("Column")
                        .HasColumnType("NVARCHAR2(450)");

                    b.Property<int>("Type")
                        .HasColumnType("NUMBER(10)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.HasKey("ReportId", "Column", "Type");

                    b.ToTable("ArtSavedReportsChart", "ART");
                });

            modelBuilder.Entity("ART_PACKAGE.Areas.Identity.Data.ArtSavedReportsColumns", b =>
                {
                    b.Property<int>("ReportId")
                        .HasColumnType("NUMBER(10)");

                    b.Property<string>("Column")
                        .HasColumnType("NVARCHAR2(450)");

                    b.HasKey("ReportId", "Column");

                    b.ToTable("ArtSavedReportsColumns", "ART");
                });

            modelBuilder.Entity("Data.Data.ArtAlertedEntity", b =>
                {
                    b.Property<string>("CaseId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(64)")
                        .HasColumnName("CASE_ID");

                    b.Property<DateTime>("CreateDate")
                        .HasPrecision(6)
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("CREATE_DATE");

                    b.Property<string>("Name")
                        .HasColumnType("CLOB")
                        .HasColumnName("NAME");

                    b.Property<string>("PepInd")
                        .HasColumnType("CLOB")
                        .HasColumnName("PEP_IND");

                    b.ToView("ART_ALERTED_ENTITY");
                });

            modelBuilder.Entity("Data.Data.ArtSystemPerformance", b =>
                {
                    b.Property<string>("CaseDesc")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(100)")
                        .HasColumnName("CASE_DESC");

                    b.Property<string>("CaseId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(64)")
                        .HasColumnName("CASE_ID");

                    b.Property<string>("CaseStatus")
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(4000)")
                        .HasColumnName("CASE_STATUS");

                    b.Property<string>("CaseType")
                        .HasMaxLength(32)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(32)")
                        .HasColumnName("CASE_TYPE");

                    b.Property<string>("ClientName")
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(4000)")
                        .HasColumnName("CLIENT_NAME");

                    b.Property<DateTime>("CreateDate")
                        .HasPrecision(6)
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("CREATE_DATE");

                    b.Property<decimal?>("DurationsInDays")
                        .HasColumnType("NUMBER")
                        .HasColumnName("DURATIONS_IN_DAYS");

                    b.Property<decimal?>("DurationsInHours")
                        .HasColumnType("NUMBER")
                        .HasColumnName("DURATIONS_IN_HOURS");

                    b.Property<decimal?>("DurationsInMinutes")
                        .HasColumnType("NUMBER")
                        .HasColumnName("DURATIONS_IN_MINUTES");

                    b.Property<decimal?>("DurationsInSeconds")
                        .HasColumnType("NUMBER")
                        .HasColumnName("DURATIONS_IN_SECONDS");

                    b.Property<DateTime?>("EcmLastStatusDate")
                        .HasPrecision(6)
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("ECM_LAST_STATUS_DATE");

                    b.Property<string>("HitsCount")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(100)")
                        .HasColumnName("HITS_COUNT");

                    b.Property<string>("IdentityNum")
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(4000)")
                        .HasColumnName("IDENTITY_NUM");

                    b.Property<string>("InvestrUserId")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(60)")
                        .HasColumnName("INVESTR_USER_ID");

                    b.Property<string>("LockedBy")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(60)")
                        .HasColumnName("LOCKED_BY");

                    b.Property<string>("Priority")
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(4000)")
                        .HasColumnName("PRIORITY");

                    b.Property<string>("SwiftMessage")
                        .HasColumnType("CLOB")
                        .HasColumnName("SWIFT_MESSAGE");

                    b.Property<string>("SwiftReference")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(1000)")
                        .HasColumnName("SWIFT_REFERENCE");

                    b.Property<decimal?>("TransactionAmount")
                        .HasColumnType("FLOAT")
                        .HasColumnName("TRANSACTION_AMOUNT");

                    b.Property<string>("TransactionCurrency")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(1000)")
                        .HasColumnName("TRANSACTION_CURRENCY");

                    b.Property<string>("TransactionDirection")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(1000)")
                        .HasColumnName("TRANSACTION_DIRECTION");

                    b.Property<string>("TransactionType")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(1000)")
                        .HasColumnName("TRANSACTION_TYPE");

                    b.Property<string>("UpdateUserId")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(60)")
                        .HasColumnName("UPDATE_USER_ID");

                    b.ToView("ART_SYSTEM_PERFORMANCE");
                });

            modelBuilder.Entity("Data.Data.ArtSystemPerfPerDate", b =>
                {
                    b.Property<decimal?>("DAY")
                        .HasColumnType("DECIMAL(18, 2)");

                    b.Property<string>("MONTH")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<decimal?>("NUMBER_OF_CASES")
                        .HasColumnType("DECIMAL(18, 2)");

                    b.Property<decimal?>("YEAR")
                        .HasColumnType("DECIMAL(18, 2)");

                    b.ToView(null);
                });

            modelBuilder.Entity("Data.Data.ArtSystemPerfPerType", b =>
                {
                    b.Property<string>("CASE_TYPE")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<decimal>("Total_Number_of_Cases")
                        .HasColumnType("DECIMAL(18, 2)");

                    b.ToView(null);
                });

            modelBuilder.Entity("Data.Data.ArtSystemPrefPerDirection", b =>
                {
                    b.Property<string>("TRANSACTION_DIRECTION")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<int>("Total_Number_of_Cases")
                        .HasColumnType("NUMBER(10)");

                    b.ToView(null);
                });

            modelBuilder.Entity("Data.Data.ArtSystemPrefPerStatus", b =>
                {
                    b.Property<string>("CASE_STATUS")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<decimal>("TOTAL_NUMBER_OF_CASES")
                        .HasColumnType("DECIMAL(18, 2)");

                    b.ToView(null);
                });

            modelBuilder.Entity("Data.Data.ArtUserPerformance", b =>
                {
                    b.Property<string>("Action")
                        .HasMaxLength(256)
                        .HasColumnType("NVARCHAR2(256)")
                        .HasColumnName("ACTION");

                    b.Property<string>("ActionUser")
                        .HasMaxLength(60)
                        .HasColumnType("NVARCHAR2(60)")
                        .HasColumnName("ACTION_USER");

                    b.Property<DateTime?>("AsssignedTime")
                        .HasColumnType("TIMESTAMP(7)")
                        .HasColumnName("ASSSIGNED_TIME");

                    b.Property<string>("CaseDesc")
                        .HasMaxLength(100)
                        .HasColumnType("NVARCHAR2(100)")
                        .HasColumnName("CASE_DESC");

                    b.Property<string>("CaseId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("NVARCHAR2(64)")
                        .HasColumnName("CASE_ID");

                    b.Property<decimal>("CaseRk")
                        .HasColumnType("numeric(10, 0)")
                        .HasColumnName("CASE_RK");

                    b.Property<string>("CaseStatus")
                        .HasMaxLength(4000)
                        .HasColumnType("NCLOB")
                        .HasColumnName("CASE_STATUS");

                    b.Property<string>("CaseTypeCd")
                        .HasMaxLength(32)
                        .HasColumnType("NVARCHAR2(32)")
                        .HasColumnName("CASE_TYPE_CD");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("TIMESTAMP(7)")
                        .HasColumnName("CREATE_DATE");

                    b.Property<string>("CreateUserId")
                        .HasMaxLength(60)
                        .HasColumnType("NVARCHAR2(60)")
                        .HasColumnName("CREATE_USER_ID");

                    b.Property<int?>("DurationsInDays")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("DURATIONS_IN_DAYS");

                    b.Property<int?>("DurationsInHours")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("DURATIONS_IN_HOURS");

                    b.Property<int?>("DurationsInMinutes")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("DURATIONS_IN_MINUTES");

                    b.Property<int?>("DurationsInSeconds")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("DURATIONS_IN_SECONDS");

                    b.Property<string>("LockedBy")
                        .HasMaxLength(60)
                        .HasColumnType("NVARCHAR2(60)")
                        .HasColumnName("LOCKED_BY");

                    b.Property<string>("Priority")
                        .HasMaxLength(4000)
                        .HasColumnType("NCLOB")
                        .HasColumnName("PRIORITY");

                    b.Property<DateTime?>("ReleasedDate")
                        .HasColumnType("TIMESTAMP(7)")
                        .HasColumnName("RELEASED_DATE");

                    b.Property<string>("UpdateUserId")
                        .HasMaxLength(60)
                        .HasColumnType("NVARCHAR2(60)")
                        .HasColumnName("UPDATE_USER_ID");

                    b.Property<DateTime?>("ValidFromDate")
                        .HasColumnType("TIMESTAMP(7)")
                        .HasColumnName("VALID_FROM_DATE");

                    b.ToView("ART_USER_PERFORMANCE", "ART");
                });

            modelBuilder.Entity("Data.Data.ArtUserPerformancePerActionUser", b =>
                {
                    b.Property<string>("ACTION_USER")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<int?>("AVG_DURATIONS_IN_DAYS")
                        .HasColumnType("NUMBER(10)");

                    b.Property<int?>("AVG_DURATIONS_IN_HOURS")
                        .HasColumnType("NUMBER(10)");

                    b.Property<int?>("AVG_DURATIONS_IN_MINUTES")
                        .HasColumnType("NUMBER(10)");

                    b.Property<int?>("AVG_DURATIONS_IN_SECONDS")
                        .HasColumnType("NUMBER(10)");

                    b.Property<int?>("DURATIONS_IN_DAYS")
                        .HasColumnType("NUMBER(10)");

                    b.Property<int?>("DURATIONS_IN_HOURS")
                        .HasColumnType("NUMBER(10)");

                    b.Property<int?>("DURATIONS_IN_MINUTES")
                        .HasColumnType("NUMBER(10)");

                    b.Property<int?>("DURATIONS_IN_SECONDS")
                        .HasColumnType("NUMBER(10)");

                    b.Property<int?>("TOTAL_NUMBER_OF_CASES")
                        .HasColumnType("NUMBER(10)");

                    b.ToView(null);
                });

            modelBuilder.Entity("Data.Data.ArtUserPerformPerAction", b =>
                {
                    b.Property<int?>("AVG_durations_in_days")
                        .HasColumnType("NUMBER(10)");

                    b.Property<int?>("AVG_durations_in_hours")
                        .HasColumnType("NUMBER(10)");

                    b.Property<int?>("AVG_durations_in_minutes")
                        .HasColumnType("NUMBER(10)");

                    b.Property<int?>("AVG_durations_in_seconds")
                        .HasColumnType("NUMBER(10)");

                    b.Property<int?>("Total_Number_Of_Cases")
                        .HasColumnType("NUMBER(10)");

                    b.Property<string>("action")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<int?>("durations_in_days")
                        .HasColumnType("NUMBER(10)");

                    b.Property<int?>("durations_in_hours")
                        .HasColumnType("NUMBER(10)");

                    b.Property<int?>("durations_in_minutes")
                        .HasColumnType("NUMBER(10)");

                    b.Property<int?>("durations_in_seconds")
                        .HasColumnType("NUMBER(10)");

                    b.ToView(null);
                });

            modelBuilder.Entity("Data.Data.ArtUserPerformPerUserAndAction", b =>
                {
                    b.Property<string>("ACTION")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("ACTION_USER")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<int?>("AVG_DURATIONS_IN_DAYS")
                        .HasColumnType("NUMBER(10)");

                    b.Property<int?>("AVG_DURATIONS_IN_HOURS")
                        .HasColumnType("NUMBER(10)");

                    b.Property<int?>("AVG_DURATIONS_IN_MINUTES")
                        .HasColumnType("NUMBER(10)");

                    b.Property<int?>("AVG_DURATIONS_IN_SECONDS")
                        .HasColumnType("NUMBER(10)");

                    b.Property<int?>("DURATIONS_IN_DAYS")
                        .HasColumnType("NUMBER(10)");

                    b.Property<int?>("DURATIONS_IN_HOURS")
                        .HasColumnType("NUMBER(10)");

                    b.Property<int?>("DURATIONS_IN_MINUTES")
                        .HasColumnType("NUMBER(10)");

                    b.Property<int?>("DURATIONS_IN_SECONDS")
                        .HasColumnType("NUMBER(10)");

                    b.Property<int?>("TOTAL_NUMBER_OF_CASES")
                        .HasColumnType("NUMBER(10)");

                    b.ToView(null);
                });

            modelBuilder.Entity("Data.DGCMGMT.ArtHomeCasesDate", b =>
                {
                    b.Property<decimal?>("Day")
                        .HasColumnType("int")
                        .HasColumnName("DAY");

                    b.Property<string>("Month")
                        .IsRequired()
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(36)")
                        .HasColumnName("MONTH");

                    b.Property<decimal?>("NumberOfCases")
                        .HasColumnType("int")
                        .HasColumnName("NUMBER_OF_CASES");

                    b.Property<decimal?>("Year")
                        .HasColumnType("int")
                        .HasColumnName("YEAR");

                    b.ToView("ART_HOME_CASES_DATE");
                });

            modelBuilder.Entity("Data.DGCMGMT.ArtHomeCasesStatus", b =>
                {
                    b.Property<string>("CaseStatus")
                        .HasMaxLength(9)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(9)")
                        .HasColumnName("CASE_STATUS");

                    b.Property<decimal?>("NumberOfCases")
                        .HasColumnType("int")
                        .HasColumnName("NUMBER_OF_CASES");

                    b.ToView("ART_HOME_CASES_STATUS");
                });

            modelBuilder.Entity("Data.DGCMGMT.ArtHomeCasesType", b =>
                {
                    b.Property<string>("CaseType")
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(400)")
                        .HasColumnName("CASE_TYPE");

                    b.Property<decimal?>("NumberOfCases")
                        .HasColumnType("int")
                        .HasColumnName("NUMBER_OF_CASES");

                    b.ToView("ART_HOME_CASES_TYPES");
                });

            modelBuilder.Entity("Data.FCF71.ArtHomeAlertsPerDate", b =>
                {
                    b.Property<int?>("Day")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("DAY");

                    b.Property<string>("Month")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(36)")
                        .HasColumnName("MONTH");

                    b.Property<int?>("NumberOfAlerts")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("NUMBER_OF_ALERTS");

                    b.Property<int?>("Year")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("YEAR");

                    b.ToView("ART_HOME_ALERTS_PER_DATE", "ART");
                });

            modelBuilder.Entity("Data.FCF71.ArtHomeAlertsPerStatus", b =>
                {
                    b.Property<string>("AlertStatus")
                        .HasMaxLength(100)
                        .HasColumnType("NVARCHAR2(100)")
                        .HasColumnName("ALERT_STATUS");

                    b.Property<int?>("AlertsCount")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("ALERTS_COUNT");

                    b.ToView("ART_HOME_ALERTS_PER_STATUS", "ART");
                });

            modelBuilder.Entity("Data.FCF71.ArtHomeNumberOfAccount", b =>
                {
                    b.Property<int?>("NumberOfAccounts")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("NUMBER_OF_ACCOUNTS");

                    b.ToView("ART_HOME_NUMBER_OF_ACCOUNTS", "ART");
                });

            modelBuilder.Entity("Data.FCF71.ArtHomeNumberOfCustomer", b =>
                {
                    b.Property<int?>("NumberOfCustomers")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("NUMBER_OF_CUSTOMERS");

                    b.ToView("ART_HOME_NUMBER_OF_CUSTOMERS", "ART");
                });

            modelBuilder.Entity("Data.FCF71.ArtHomeNumberOfHighRiskCustomer", b =>
                {
                    b.Property<int?>("NumberOfHighRiskCustomers")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("NUMBER_OF_HIGH_RISK_CUSTOMERS");

                    b.ToView("ART_NUMBER_OF_HIGH_RISK_CUSTS", "ART");
                });

            modelBuilder.Entity("Data.FCF71.ArtHomeNumberOfPepCustomer", b =>
                {
                    b.Property<int?>("NumberOfPepCustomers")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("NUMBER_OF_PEP_CUSTOMERS");

                    b.ToView("ART_NUMBER_OF_PEP_CUSTOMERS", "ART");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("NVARCHAR2(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("NVARCHAR2(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("NVARCHAR2(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("\"NormalizedName\" IS NOT NULL");

                    b.ToTable("AspNetRoles", "ART");

                    b.HasData(
                        new
                        {
                            Id = "e60411ee-1127-4f5e-8f03-367ef13017a6",
                            ConcurrencyStamp = "95abd15b-cc84-4c1a-848e-873aa888c408",
                            Name = "Home",
                            NormalizedName = "HOME"
                        },
                        new
                        {
                            Id = "83393df2-1bfa-471d-9a8a-8bf7c4b3f112",
                            ConcurrencyStamp = "087f42e3-291f-4b86-9391-1829bfe7154e",
                            Name = "CutomReport",
                            NormalizedName = "CUTOMREPORT"
                        },
                        new
                        {
                            Id = "ae3a9d7a-5adf-4cd9-85c4-517e59d08513",
                            ConcurrencyStamp = "91b6e27c-c30c-4095-9e56-014e183371c8",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", "ART");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", "ART");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("NVARCHAR2(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("NVARCHAR2(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", "ART");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("NVARCHAR2(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("NVARCHAR2(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", "ART");

                    b.HasData(
                        new
                        {
                            UserId = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            RoleId = "ae3a9d7a-5adf-4cd9-85c4-517e59d08513"
                        },
                        new
                        {
                            UserId = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            RoleId = "83393df2-1bfa-471d-9a8a-8bf7c4b3f112"
                        },
                        new
                        {
                            UserId = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            RoleId = "e60411ee-1127-4f5e-8f03-367ef13017a6"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("NVARCHAR2(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("NVARCHAR2(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("NVARCHAR2(128)");

                    b.Property<string>("Value")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", "ART");
                });

            modelBuilder.Entity("ART_PACKAGE.Areas.Identity.Data.ArtSavedCustomReport", b =>
                {
                    b.HasOne("ART_PACKAGE.Areas.Identity.Data.AppUser", "User")
                        .WithMany("Reports")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ART_PACKAGE.Areas.Identity.Data.ArtSavedReportsChart", b =>
                {
                    b.HasOne("ART_PACKAGE.Areas.Identity.Data.ArtSavedCustomReport", "Report")
                        .WithMany("Charts")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Report");
                });

            modelBuilder.Entity("ART_PACKAGE.Areas.Identity.Data.ArtSavedReportsColumns", b =>
                {
                    b.HasOne("ART_PACKAGE.Areas.Identity.Data.ArtSavedCustomReport", "Report")
                        .WithMany("Columns")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Report");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ART_PACKAGE.Areas.Identity.Data.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ART_PACKAGE.Areas.Identity.Data.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ART_PACKAGE.Areas.Identity.Data.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ART_PACKAGE.Areas.Identity.Data.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ART_PACKAGE.Areas.Identity.Data.AppUser", b =>
                {
                    b.Navigation("Reports");
                });

            modelBuilder.Entity("ART_PACKAGE.Areas.Identity.Data.ArtSavedCustomReport", b =>
                {
                    b.Navigation("Charts");

                    b.Navigation("Columns");
                });
#pragma warning restore 612, 618
        }
    }
}
