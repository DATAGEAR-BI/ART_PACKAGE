// <auto-generated />
using System;
using Data.DATA.FATCA;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Oracle.EntityFrameworkCore.Metadata;

#nullable disable

namespace OracleMigrations.Migrations.FATCA
{
    [DbContext(typeof(FATCAContext))]
    partial class FATCAContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("ART")
                .UseCollation("USING_NLS_COMP")
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            OracleModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.HasSequence("HF_JOB_ID_SEQ");

            modelBuilder.HasSequence("HF_SEQUENCE");

            modelBuilder.Entity("Data.DATA.FATCA.ArtFatcaAlert", b =>
                {
                    b.Property<string>("BranchName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(100)")
                        .HasColumnName("BRANCH_NAME");

                    b.Property<string>("CaseId")
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(64)")
                        .HasColumnName("CASE_ID");

                    b.Property<DateTime?>("CreateDate")
                        .HasPrecision(6)
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("CREATE_DATE");

                    b.Property<string>("CustomerId")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(150)")
                        .HasColumnName("CUSTOMER_ID");

                    b.Property<string>("CustomerName")
                        .HasMaxLength(1200)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(1200)")
                        .HasColumnName("CUSTOMER_NAME");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(100)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("IncidentId")
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(64)")
                        .HasColumnName("INCIDENT_ID");

                    b.Property<string>("Type")
                        .HasColumnType("VARCHAR2(12000)")
                        .HasColumnName("TYPE");

                    b.ToView("ART_FATCA_ALERTS");
                });

            modelBuilder.Entity("Data.DATA.FATCA.ArtFatcaCace", b =>
                {
                    b.Property<string>("BranchName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(100)")
                        .HasColumnName("BRANCH_NAME");

                    b.Property<string>("CaseId")
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(64)")
                        .HasColumnName("CASE_ID");

                    b.Property<string>("CaseStatus")
                        .HasColumnType("VARCHAR2(12000)")
                        .HasColumnName("CASE_STATUS");

                    b.Property<string>("CaseType")
                        .HasColumnType("VARCHAR2(12000)")
                        .HasColumnName("CASE_TYPE");

                    b.Property<DateTime?>("CreateDate")
                        .HasPrecision(6)
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("CREATE_DATE");

                    b.Property<string>("CustomerId")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(150)")
                        .HasColumnName("CUSTOMER_ID");

                    b.Property<string>("CustomerName")
                        .HasMaxLength(1200)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(1200)")
                        .HasColumnName("CUSTOMER_NAME");

                    b.ToView("ART_FATCA_CACES");
                });

            modelBuilder.Entity("Data.DATA.FATCA.ArtFatcaCustomer", b =>
                {
                    b.Property<string>("BranchName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(100)")
                        .HasColumnName("BRANCH_NAME");

                    b.Property<string>("CaseId")
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(64)")
                        .HasColumnName("CASE_ID");

                    b.Property<string>("CaseStatus")
                        .HasColumnType("VARCHAR2(12000)")
                        .HasColumnName("CASE_STATUS");

                    b.Property<DateTime?>("CreateDate")
                        .HasPrecision(6)
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("CREATE_DATE");

                    b.Property<string>("CustClsFlag")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(300)")
                        .HasColumnName("CUST_CLS_FLAG");

                    b.Property<decimal?>("CustKey")
                        .HasColumnType("NUMBER(38)")
                        .HasColumnName("CUST_KEY");

                    b.Property<string>("CustomerId")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(150)")
                        .HasColumnName("CUSTOMER_ID");

                    b.Property<string>("CustomerName")
                        .HasMaxLength(1200)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(1200)")
                        .HasColumnName("CUSTOMER_NAME");

                    b.Property<string>("MainNationality")
                        .HasColumnType("VARCHAR2(12000)")
                        .HasColumnName("MAIN_NATIONALITY");

                    b.Property<string>("SignW8")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(3)")
                        .HasColumnName("SIGN_W8");

                    b.Property<string>("SignW9")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(3)")
                        .HasColumnName("SIGN_W9");

                    b.Property<DateTime?>("W8SignDate")
                        .HasColumnType("DATE")
                        .HasColumnName("W8_SIGN_DATE");

                    b.Property<DateTime?>("W9SignDate")
                        .HasColumnType("DATE")
                        .HasColumnName("W9_SIGN_DATE");

                    b.ToView("ART_FATCA_CUSTOMERS");
                });

            modelBuilder.Entity("Data.DATA.FATCA.ArtFatcaDormantAccountsSummary", b =>
                {
                    b.Property<decimal?>("AmountInUsd")
                        .HasColumnType("NUMBER")
                        .HasColumnName("AMOUNT_IN_USD");

                    b.Property<decimal?>("NumberOfAccounts")
                        .HasColumnType("NUMBER")
                        .HasColumnName("NUMBER_OF_ACCOUNTS");

                    b.ToView("ART_FATCA_DORMANT_ACCOUNTS_SUMMARY");
                });

            modelBuilder.Entity("Data.DATA.FATCA.ArtFatcaIrsReport", b =>
                {
                    b.Property<decimal?>("Accountbalance")
                        .HasColumnType("FLOAT")
                        .HasColumnName("ACCOUNTBALANCE");

                    b.Property<string>("Accountclosed")
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(12)")
                        .HasColumnName("ACCOUNTCLOSED");

                    b.Property<string>("AccountcountFatca201")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("CHAR(2000)")
                        .HasColumnName("ACCOUNTCOUNT_FATCA201")
                        .IsFixedLength();

                    b.Property<string>("AccountcountFatca202")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("CHAR(2000)")
                        .HasColumnName("ACCOUNTCOUNT_FATCA202")
                        .IsFixedLength();

                    b.Property<decimal?>("AccountcountFatca203")
                        .HasColumnType("NUMBER")
                        .HasColumnName("ACCOUNTCOUNT_FATCA203");

                    b.Property<string>("AccountcountFatca204")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("CHAR(2000)")
                        .HasColumnName("ACCOUNTCOUNT_FATCA204")
                        .IsFixedLength();

                    b.Property<string>("AccountcountFatca205")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("CHAR(2000)")
                        .HasColumnName("ACCOUNTCOUNT_FATCA205")
                        .IsFixedLength();

                    b.Property<string>("AccountcountFatca206")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("CHAR(2000)")
                        .HasColumnName("ACCOUNTCOUNT_FATCA206")
                        .IsFixedLength();

                    b.Property<string>("Accountholdertype")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(8)")
                        .HasColumnName("ACCOUNTHOLDERTYPE");

                    b.Property<string>("Accountnumber")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(150)")
                        .HasColumnName("ACCOUNTNUMBER");

                    b.Property<string>("Accounttype")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(1)")
                        .HasColumnName("ACCOUNTTYPE");

                    b.Property<string>("AddressfreeE")
                        .HasMaxLength(1065)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(1065)")
                        .HasColumnName("ADDRESSFREE_E");

                    b.Property<string>("AddressfreeI")
                        .HasMaxLength(1065)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(1065)")
                        .HasColumnName("ADDRESSFREE_I");

                    b.Property<string>("Birthdate")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("CHAR(2000)")
                        .HasColumnName("BIRTHDATE")
                        .IsFixedLength();

                    b.Property<string>("Countrycode")
                        .HasMaxLength(9)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(9)")
                        .HasColumnName("COUNTRYCODE");

                    b.Property<string>("Countrycodeadd")
                        .HasMaxLength(9)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(9)")
                        .HasColumnName("COUNTRYCODEADD");

                    b.Property<string>("Firstname")
                        .HasMaxLength(750)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(750)")
                        .HasColumnName("FIRSTNAME");

                    b.Property<string>("Lastname")
                        .HasMaxLength(1200)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(1200)")
                        .HasColumnName("LASTNAME");

                    b.Property<string>("Middlename")
                        .HasMaxLength(750)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(750)")
                        .HasColumnName("MIDDLENAME");

                    b.Property<string>("Nationality")
                        .HasMaxLength(9)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(9)")
                        .HasColumnName("NATIONALITY");

                    b.Property<string>("OwnerAddress")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("CHAR(2000)")
                        .HasColumnName("OWNER_ADDRESS")
                        .IsFixedLength();

                    b.Property<string>("OwnerFirstName")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("CHAR(2000)")
                        .HasColumnName("OWNER_FIRST_NAME")
                        .IsFixedLength();

                    b.Property<string>("OwnerLastName")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("CHAR(2000)")
                        .HasColumnName("OWNER_LAST_NAME")
                        .IsFixedLength();

                    b.Property<string>("OwnerResCountryCode")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("CHAR(2000)")
                        .HasColumnName("OWNER_RES_COUNTRY_CODE")
                        .IsFixedLength();

                    b.Property<string>("OwnerTin")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("CHAR(2000)")
                        .HasColumnName("OWNER_TIN")
                        .IsFixedLength();

                    b.Property<decimal?>("Paymentamnt501")
                        .HasColumnType("FLOAT")
                        .HasColumnName("PAYMENTAMNT_501");

                    b.Property<decimal?>("Paymentamnt502")
                        .HasColumnType("FLOAT")
                        .HasColumnName("PAYMENTAMNT_502");

                    b.Property<decimal?>("Paymentamnt503")
                        .HasColumnType("FLOAT")
                        .HasColumnName("PAYMENTAMNT_503");

                    b.Property<decimal?>("Paymentamnt504")
                        .HasColumnType("FLOAT")
                        .HasColumnName("PAYMENTAMNT_504");

                    b.Property<string>("PoolbalanceFatca201")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("CHAR(2000)")
                        .HasColumnName("POOLBALANCE_FATCA201")
                        .IsFixedLength();

                    b.Property<string>("PoolbalanceFatca202")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("CHAR(2000)")
                        .HasColumnName("POOLBALANCE_FATCA202")
                        .IsFixedLength();

                    b.Property<decimal?>("PoolbalanceFatca203")
                        .HasColumnType("FLOAT")
                        .HasColumnName("POOLBALANCE_FATCA203");

                    b.Property<string>("PoolbalanceFatca204")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("CHAR(2000)")
                        .HasColumnName("POOLBALANCE_FATCA204")
                        .IsFixedLength();

                    b.Property<string>("PoolbalanceFatca205")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("CHAR(2000)")
                        .HasColumnName("POOLBALANCE_FATCA205")
                        .IsFixedLength();

                    b.Property<string>("PoolbalanceFatca206")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("CHAR(2000)")
                        .HasColumnName("POOLBALANCE_FATCA206")
                        .IsFixedLength();

                    b.Property<string>("SignW8")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(3)")
                        .HasColumnName("SIGN_W8");

                    b.Property<string>("SignW9")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(3)")
                        .HasColumnName("SIGN_W9");

                    b.Property<string>("Tin")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(150)")
                        .HasColumnName("TIN");

                    b.ToView("ART_FATCA_IRS_REPORT");
                });
#pragma warning restore 612, 618
        }
    }
}
