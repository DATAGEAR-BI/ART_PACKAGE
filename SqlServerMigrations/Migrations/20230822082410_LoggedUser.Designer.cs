// <auto-generated />
using System;
using ART_PACKAGE.Areas.Identity.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace SqlServerMigrations.Migrations
{
    [DbContext(typeof(AuthContext))]
    [Migration("20230822082410_LoggedUser")]
    partial class LoggedUser
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ART_PACKAGE.Areas.Identity.Data.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c711c41e-f04f-4a77-aadd-8076d7f7fb5c",
                            Email = "Art_Admin@datagearbi.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ART_ADMIN@DATAGEARBI.COM",
                            NormalizedUserName = "ART_ADMIN@DATAGEARBI.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEAzrYNcfE7FTQ1HMs4D3nnnQA5AqHafwnwHKQFwgC07NcWqUygw42sxx9wg9pCaoJw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "eccfd9d3-9dd0-4f89-a8a9-83e39ccf3cfe",
                            TwoFactorEnabled = false,
                            UserName = "Art_Admin@datagearbi.com"
                        });
                });

            modelBuilder.Entity("ART_PACKAGE.Areas.Identity.Data.ArtSavedCustomReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Schema")
                        .HasColumnType("int");

                    b.Property<string>("Table")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ArtSavedCustomReport", (string)null);
                });

            modelBuilder.Entity("ART_PACKAGE.Areas.Identity.Data.ArtSavedReportsChart", b =>
                {
                    b.Property<int>("ReportId")
                        .HasColumnType("int");

                    b.Property<string>("Column")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReportId", "Column", "Type");

                    b.ToTable("ArtSavedReportsChart", (string)null);
                });

            modelBuilder.Entity("ART_PACKAGE.Areas.Identity.Data.ArtSavedReportsColumns", b =>
                {
                    b.Property<int>("ReportId")
                        .HasColumnType("int");

                    b.Property<string>("Column")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsNullable")
                        .HasColumnType("bit");

                    b.Property<string>("JsType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReportId", "Column");

                    b.ToTable("ArtSavedReportsColumns");
                });

            modelBuilder.Entity("ART_PACKAGE.Helpers.Logging.ArtLoggedUserAudit", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<DateTime?>("LoginDate")
                        .HasColumnType("datetime")
                        .HasColumnName("Login_Date");

                    b.Property<bool?>("LoginStatus")
                        .HasColumnType("bit")
                        .HasColumnName("Login_Status");

                    b.Property<string>("UserName")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("User_Name");

                    b.HasKey("ID")
                        .HasName("ID");

                    b.ToTable("Art_LoggedUser_AUD", (string)null);
                });

            modelBuilder.Entity("Data.Data.ARTDGAML.ArtStDgAmlAlertPerOwner", b =>
                {
                    b.Property<decimal?>("ALERTS_CNT_SUM")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("OWNER_QUEUE")
                        .HasColumnType("nvarchar(max)");

                    b.ToView(null);
                });

            modelBuilder.Entity("Data.Data.ARTDGAML.ArtStDgAmlAlertsPerBranch", b =>
                {
                    b.Property<decimal?>("ALERTS_COUNT")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("BRANCH_NAME")
                        .HasColumnType("nvarchar(max)");

                    b.ToView(null);
                });

            modelBuilder.Entity("Data.Data.ARTDGAML.ArtStDgAmlAlertsPerScenario", b =>
                {
                    b.Property<decimal?>("ALERTS_COUNT")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SCENARIO_NAME")
                        .HasColumnType("nvarchar(max)");

                    b.ToView(null);
                });

            modelBuilder.Entity("Data.Data.ARTDGAML.ArtStDgAmlAlertsPerStatus", b =>
                {
                    b.Property<decimal?>("ALERTS_COUNT")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ALERT_STATUS")
                        .HasColumnType("nvarchar(max)");

                    b.ToView(null);
                });

            modelBuilder.Entity("Data.Data.ARTDGAML.ArtStDgAmlCasesPerCategory", b =>
                {
                    b.Property<string>("CASE_CATEGORY")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("NUMBER_OF_CASES")
                        .HasColumnType("decimal(18,2)");

                    b.ToView(null);
                });

            modelBuilder.Entity("Data.Data.ARTDGAML.ArtStDgAmlCasesPerPriority", b =>
                {
                    b.Property<string>("CASE_PRIORITY")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("NUMBER_OF_CASES")
                        .HasColumnType("decimal(18,2)");

                    b.ToView(null);
                });

            modelBuilder.Entity("Data.Data.ARTDGAML.ArtStDgAmlCasesPerStatus", b =>
                {
                    b.Property<string>("CASE_STATUS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("NUMBER_OF_CASES")
                        .HasColumnType("decimal(18,2)");

                    b.ToView(null);
                });

            modelBuilder.Entity("Data.Data.ARTDGAML.ArtStDgAmlCustomerPerBranch", b =>
                {
                    b.Property<string>("BRANCH_NAME")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("NUMBER_OF_CUSTOMERS")
                        .HasColumnType("decimal(18,2)");

                    b.ToView(null);
                });

            modelBuilder.Entity("Data.Data.ARTDGAML.ArtStDgAmlCustomerPerType", b =>
                {
                    b.Property<string>("CUSTOMER_TYPE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("NUMBER_OF_CUSTOMERS")
                        .HasColumnType("decimal(18,2)");

                    b.ToView(null);
                });

            modelBuilder.Entity("Data.Data.ARTDGAML.ArtStDgAmlExternalCustomerPerBranch", b =>
                {
                    b.Property<string>("BRANCH_NAME")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("NUMBER_OF_CUSTOMERS")
                        .HasColumnType("decimal(18,2)");

                    b.ToView(null);
                });

            modelBuilder.Entity("Data.Data.ARTDGAML.ArtStDgAmlExternalCustomerPerType", b =>
                {
                    b.Property<string>("CUSTOMER_TYPE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("NUMBER_OF_CUSTOMERS")
                        .HasColumnType("decimal(18,2)");

                    b.ToView(null);
                });

            modelBuilder.Entity("Data.Data.ARTGOAML.ArtStGoAmlReportsPerCreator", b =>
                {
                    b.Property<string>("CREATED_BY")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("NUMBER_OF_REPORTS")
                        .HasColumnType("decimal(18,2)");

                    b.ToView(null);
                });

            modelBuilder.Entity("Data.Data.ARTGOAML.ArtStGoAmlReportsPerIndicator", b =>
                {
                    b.Property<string>("INDICATOR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NUMBER_OF_REPORTS")
                        .HasColumnType("int");

                    b.ToView(null);
                });

            modelBuilder.Entity("Data.Data.ARTGOAML.ArtStGoAmlReportsPerStatus", b =>
                {
                    b.Property<decimal?>("NUMBER_OF_REPORTS")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("REPORT_STATUS")
                        .HasColumnType("nvarchar(max)");

                    b.ToView(null);
                });

            modelBuilder.Entity("Data.Data.ARTGOAML.ArtStGoAmlReportsPerType", b =>
                {
                    b.Property<decimal?>("NUMBER_OF_REPORTS")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("REPORT_TYPE")
                        .HasColumnType("nvarchar(max)");

                    b.ToView(null);
                });

            modelBuilder.Entity("Data.Data.ArtGroupsAuditView", b =>
                {
                    b.Property<string>("Action")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("action");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("display_name");

                    b.Property<string>("GroupName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("group_name");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("last_updated_date");

                    b.Property<string>("MemberUsers")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("member_users");

                    b.Property<string>("RoleNames")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("role_names");

                    b.Property<string>("SubGroupNames")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("sub_group_names");

                    b.ToView("ART_GROUPS_AUDIT_VIEW", "ART_DB");
                });

            modelBuilder.Entity("Data.Data.ArtLoggedUser", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<DateTime?>("LoginDate")
                        .HasColumnType("datetime")
                        .HasColumnName("Login_Date");

                    b.Property<bool?>("LoginStatus")
                        .HasColumnType("bit")
                        .HasColumnName("Login_Status");

                    b.Property<string>("UserName")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("User_Name");

                    b.HasKey("ID")
                        .HasName("ID");

                    b.ToTable("Art_LoggedUsers", (string)null);
                });

            modelBuilder.Entity("Data.Data.ArtRolesAuditView", b =>
                {
                    b.Property<string>("Action")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("action");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("display_name");

                    b.Property<string>("GroupNames")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("group_names");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("last_updated_date");

                    b.Property<string>("MemberUsers")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("member_users");

                    b.Property<string>("RoleName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("role_name");

                    b.ToView("ART_ROLES_AUDIT_VIEW", "ART_DB");
                });

            modelBuilder.Entity("Data.Data.ArtStAlertPerOwner", b =>
                {
                    b.Property<decimal?>("ALERTS_CNT_SUM")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("OWNER_USERID")
                        .HasColumnType("nvarchar(max)");

                    b.ToView(null);
                });

            modelBuilder.Entity("Data.Data.ArtStAlertsPerStatus", b =>
                {
                    b.Property<decimal?>("ALERTS_COUNT")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ALERT_STATUS")
                        .HasColumnType("nvarchar(max)");

                    b.ToView(null);
                });

            modelBuilder.Entity("Data.Data.ArtStAmlPropRiskClass", b =>
                {
                    b.Property<decimal?>("NUMBER_OF_CUSTOMERS")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PROPOSED_RISK_CLASS")
                        .HasColumnType("nvarchar(max)");

                    b.ToView(null);
                });

            modelBuilder.Entity("Data.Data.ArtStAmlRiskClass", b =>
                {
                    b.Property<decimal?>("NUMBER_OF_CUSTOMERS")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("RISK_CLASSIFICATION")
                        .HasColumnType("nvarchar(max)");

                    b.ToView(null);
                });

            modelBuilder.Entity("Data.Data.ArtStCasesPerCategory", b =>
                {
                    b.Property<string>("CASE_CATEGORY")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("NUMBER_OF_CASES")
                        .HasColumnType("decimal(18,2)");

                    b.ToView(null);
                });

            modelBuilder.Entity("Data.Data.ArtStCasesPerPriority", b =>
                {
                    b.Property<string>("CASE_PRIORITY")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("NUMBER_OF_CASES")
                        .HasColumnType("decimal(18,2)");

                    b.ToView(null);
                });

            modelBuilder.Entity("Data.Data.ArtStCasesPerStatus", b =>
                {
                    b.Property<string>("CASE_STATUS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("NUMBER_OF_CASES")
                        .HasColumnType("decimal(18,2)");

                    b.ToView(null);
                });

            modelBuilder.Entity("Data.Data.ArtStCasesPerSubcat", b =>
                {
                    b.Property<string>("CASE_SUBCATEGORY")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("NUMBER_OF_CASES")
                        .HasColumnType("decimal(18,2)");

                    b.ToView(null);
                });

            modelBuilder.Entity("Data.Data.ArtStCustPerBranch", b =>
                {
                    b.Property<string>("BRANCH_NAME")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("NUMBER_OF_CUSTOMERS")
                        .HasColumnType("decimal(18,2)");

                    b.ToView(null);
                });

            modelBuilder.Entity("Data.Data.ArtStCustPerRisk", b =>
                {
                    b.Property<decimal?>("NUMBER_OF_CUSTOMERS")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("RISK_CLASSIFICATION")
                        .HasColumnType("nvarchar(max)");

                    b.ToView(null);
                });

            modelBuilder.Entity("Data.Data.ArtStCustPerType", b =>
                {
                    b.Property<string>("CUSTOMER_TYPE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("NUMBER_OF_CUSTOMERS")
                        .HasColumnType("decimal(18,2)");

                    b.ToView(null);
                });

            modelBuilder.Entity("Data.Data.ArtUsersAuditView", b =>
                {
                    b.Property<string>("Action")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("action");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("address");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("display_name");

                    b.Property<string>("DomainAccounts")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("domain_accounts");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<bool?>("Enable")
                        .HasColumnType("bit")
                        .HasColumnName("enable");

                    b.Property<string>("GroupNames")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("group_names");

                    b.Property<DateTime?>("LastFailedLogin")
                        .HasColumnType("datetime")
                        .HasColumnName("last_failed_login");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("datetime")
                        .HasColumnName("last_login_date");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("last_updated_date");

                    b.Property<string>("Phone")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("phone");

                    b.Property<string>("RoleNames")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("role_names");

                    b.Property<string>("Status")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("status");

                    b.Property<string>("UserName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("user_name");

                    b.ToView("ART_USERS_AUDIT_VIEW", "ART_DB");
                });

            modelBuilder.Entity("Data.Data.LastLoginPerDayView", b =>
                {
                    b.Property<string>("AppName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("APP_NAME");

                    b.Property<string>("DeviceName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DEVICE_NAME");

                    b.Property<string>("DeviceType")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DEVICE_TYPE");

                    b.Property<string>("Ip")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("IP");

                    b.Property<string>("Location")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("LOCATION");

                    b.Property<DateTime?>("Logindatetime")
                        .HasColumnType("datetime")
                        .HasColumnName("LOGINDATETIME");

                    b.Property<string>("UserName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("USER_NAME");

                    b.ToView("LAST_LOGIN_PER_DAY_VIEW", "ART_DB");
                });

            modelBuilder.Entity("Data.Data.ListGroupsRolesSummary", b =>
                {
                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("GROUP_NAME");

                    b.Property<string>("RoleName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ROLE_NAME");

                    b.ToView("LIST_GROUPS_ROLES_SUMMARY", "ART_DB");
                });

            modelBuilder.Entity("Data.Data.ListGroupsSubGroupsSummary", b =>
                {
                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("GROUP_NAME");

                    b.Property<string>("SubGroupName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("SUB_GROUP_NAME");

                    b.ToView("LIST_GROUPS_SUB_GROUPS_SUMMARY", "ART_DB");
                });

            modelBuilder.Entity("Data.Data.ListOfDeletedUser", b =>
                {
                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("address");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("display_name");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<DateTime?>("LastFailedLogin")
                        .HasColumnType("datetime")
                        .HasColumnName("last_failed_login");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("datetime")
                        .HasColumnName("last_login_date");

                    b.Property<string>("Phone")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("phone");

                    b.Property<string>("UserName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("USER_NAME");

                    b.Property<string>("UserType")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("user_type");

                    b.ToView("LIST_OF_DELTED_USERS", "ART_DB");
                });

            modelBuilder.Entity("Data.Data.ListOfGroup", b =>
                {
                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("display_name");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("group_name");

                    b.Property<string>("GroupType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("group_type");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("last_updated_date");

                    b.ToView("LIST_OF_GROUPS", "ART_DB");
                });

            modelBuilder.Entity("Data.Data.ListOfRole", b =>
                {
                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("display_name");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("last_updated_date");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("role_name");

                    b.Property<string>("RoleType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("role_type");

                    b.ToView("LIST_OF_ROLES", "ART_DB");
                });

            modelBuilder.Entity("Data.Data.ListOfUser", b =>
                {
                    b.Property<bool?>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("active");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("address");

                    b.Property<int?>("CounterLock")
                        .HasColumnType("int")
                        .HasColumnName("counter_lock");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("display_name");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<bool?>("Enable")
                        .HasColumnType("bit")
                        .HasColumnName("enable");

                    b.Property<DateTime?>("LastFailedLogin")
                        .HasColumnType("datetime")
                        .HasColumnName("last_failed_login");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("datetime")
                        .HasColumnName("last_login_date");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("last_updated_date");

                    b.Property<string>("Phone")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("phone");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("user_name");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("user_type");

                    b.ToView("LIST_OF_USERS", "ART_DB");
                });

            modelBuilder.Entity("Data.Data.ListOfUsersAndGroupsRole", b =>
                {
                    b.Property<string>("DisplayName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DISPLAY_NAME");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("EMAIL");

                    b.Property<string>("MemberOfGroup")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("MEMBER_OF_GROUP");

                    b.Property<string>("RoleOfGroup")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ROLE_OF_GROUP");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("USER_NAME");

                    b.ToView("LIST_OF_USERS_AND_GROUPS_ROLES", "ART_DB");
                });

            modelBuilder.Entity("Data.Data.ListOfUsersGroup", b =>
                {
                    b.Property<string>("DisplayName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DISPLAY_NAME");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("EMAIL");

                    b.Property<string>("MemberOfGroup")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("MEMBER_OF_GROUP");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("USER_NAME");

                    b.ToView("LIST_OF_USERS_GROUPS", "ART_DB");
                });

            modelBuilder.Entity("Data.Data.ListOfUsersRole", b =>
                {
                    b.Property<string>("DisplayName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DISPLAY_NAME");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("EMAIL");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("USER_NAME");

                    b.Property<string>("UserRole")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("USER_ROLE");

                    b.ToView("LIST_OF_USERS_ROLES", "ART_DB");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "e60411ee-1127-4f5e-8f03-367ef13017a6",
                            ConcurrencyStamp = "f63162e7-63d4-4e51-a102-ae4f95ab5bda",
                            Name = "Home",
                            NormalizedName = "HOME"
                        },
                        new
                        {
                            Id = "83393df2-1bfa-471d-9a8a-8bf7c4b3f112",
                            ConcurrencyStamp = "c3460520-0b32-433a-82e9-dc5f630c94ff",
                            Name = "CutomReport",
                            NormalizedName = "CUTOMREPORT"
                        },
                        new
                        {
                            Id = "ae3a9d7a-5adf-4cd9-85c4-517e59d08513",
                            ConcurrencyStamp = "5ad49477-6cb2-42b4-a307-1f2e608c89d8",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            RoleId = "ae3a9d7a-5adf-4cd9-85c4-517e59d08513"
                        },
                        new
                        {
                            UserId = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            RoleId = "83393df2-1bfa-471d-9a8a-8bf7c4b3f112"
                        },
                        new
                        {
                            UserId = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            RoleId = "e60411ee-1127-4f5e-8f03-367ef13017a6"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ART_PACKAGE.Areas.Identity.Data.ArtSavedCustomReport", b =>
                {
                    b.HasOne("ART_PACKAGE.Areas.Identity.Data.AppUser", "User")
                        .WithMany("Reports")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ART_PACKAGE.Areas.Identity.Data.ArtSavedReportsChart", b =>
                {
                    b.HasOne("ART_PACKAGE.Areas.Identity.Data.ArtSavedCustomReport", "Report")
                        .WithMany("Charts")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Report");
                });

            modelBuilder.Entity("ART_PACKAGE.Areas.Identity.Data.ArtSavedReportsColumns", b =>
                {
                    b.HasOne("ART_PACKAGE.Areas.Identity.Data.ArtSavedCustomReport", "Report")
                        .WithMany("Columns")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Report");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ART_PACKAGE.Areas.Identity.Data.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ART_PACKAGE.Areas.Identity.Data.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ART_PACKAGE.Areas.Identity.Data.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ART_PACKAGE.Areas.Identity.Data.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ART_PACKAGE.Areas.Identity.Data.AppUser", b =>
                {
                    b.Navigation("Reports");
                });

            modelBuilder.Entity("ART_PACKAGE.Areas.Identity.Data.ArtSavedCustomReport", b =>
                {
                    b.Navigation("Charts");

                    b.Navigation("Columns");
                });
#pragma warning restore 612, 618
        }
    }
}
