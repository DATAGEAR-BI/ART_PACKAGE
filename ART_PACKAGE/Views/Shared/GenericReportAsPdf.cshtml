@model List<IEnumerable<Dictionary<string, object>>>
@using System.Globalization;
@using ART_PACKAGE.Extentions.StringExtentions;
@inject Microsoft.AspNetCore.SignalR.IHubContext<ART_PACKAGE.Hubs.ExportHub> _exportHub
@inject ART_PACKAGE.Helpers.UsersConnectionIds connections
@inject ART_PACKAGE.Helpers.Handlers.ProcessesHandler _pdfHAndler
@using Microsoft.AspNetCore.Identity
@inject Microsoft.AspNetCore.Hosting.IWebHostEnvironment WebHostEnvironment


@{
    Layout = null;
    var recordPerPage = 17;
    var user = User.Identity.Name;
    string exportinProcess = (string)ViewData["reportId"]; //DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.fff")
    var M = Model;
    var s = "hamada";
}


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="@(Context.Request.Scheme + "://" + Context.Request.Host + Url.Content("~/lib/bootstrap/dist/css/bootstrap.min.css"))" />
    <link rel="stylesheet" href="@(Context.Request.Scheme + "://" + Context.Request.Host + Url.Content("~/lib/bootstrap/dist/css/bootstrap.css"))" />

    
    <style>

        body {
            overflow: visible;
        }

        .brk {
            page-break-after: always;
        }

        table {
            width: 100%;
            table-layout: fixed;
            page-break-after: always;
        }

        thead {
            display: table-header-group;
        }

        tfoot {
            display: table-row-group;
        }

        tr {
            /*page-break-inside: inherit*/
            page-break-inside: avoid;
        }

        td {
            text-align: center;
            vertical-align: middle;
            font-size: 14px;
        }

            td div {
                height: auto;
                font-size: 12px;
            }
            .dynamic-font {
            display: inline-block;
            width: 100%;
            word-wrap: break-word;
        }

    </style>
</head>
<body>
    <div class="container-fluid">
        <div class="jumbotron brk" style="height: 100%">
            <h1 class="display-4">@ViewData["title"]</h1>
            <p class="lead">@ViewData["desc"]</p>
            <hr class="my-4">
            <div class="d-flex justify-content-between">
                <img src="@(Context.Request.Scheme + "://" + Context.Request.Host + Url.Content("~/imgs/LOGO.png"))" class="rounded col-4" alt="DataGear Logo">
            </div>
        </div>

        @if (!Model.First().Any())
        {
            <div>there is no data</div>
        }
        else
        {
            var length = Model.First().Count();
            var counter = 0;
            var tcounter = 0;
            var ttotal = Model.Count;
            var tttotalRecords = length * ttotal;

            for (int i = 0; i < length; i += recordPerPage)
            {
                for (int j = 0; j < Model.Count; j++)
                {
                    Console.WriteLine(counter);
                    counter++;

                    var keys = Model[j].First().Keys;
                    var data = Model[j].Skip((i / recordPerPage) * recordPerPage).Take(recordPerPage);
                    // Calculate column width based on number of columns
                    var columnWidth = 100.0 / keys.Count();

                    // Set font size based on column width
                    // Calculate font size based on column width, with base font size of 14px
                    var baseFontSize = 14; // Starting base font size
                    var maxColumnWidth = 25; // Maximum allowed column width (in %)
                    var fontSize = Math.Max(10, baseFontSize * (columnWidth / maxColumnWidth));

                    // Limit the font size to a minimum of 10px
                    var fontSizePx = $"{fontSize}px";                    //IEnumerable<Dictionary<string, object>> ss = new();
                    <table class="table table-striped">
                        <thead class="thead-light">
                            <tr>
                                @foreach (var key in keys)
                                {
                                    <td>@key.MapToHeaderName()</td>
                                }
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in data)
                            {
                                tcounter++;
                                var pregress = (Convert.ToDouble(tcounter-1) / Convert.ToDouble(tttotalRecords)) * 100;
                                //Console.WriteLine(pregress);
                                _pdfHAndler.UpdateCompletionPercentage(exportinProcess, Convert.ToDecimal(pregress));

                                await _exportHub.Clients.Clients(connections.GetConnections(user))
                                .SendCoreAsync("updateExportPDFProgress", new object[] { pregress, exportinProcess });
                                <tr>
                                    @foreach (var key in keys)
                                    {

                                        @* if (_pdfHAndler.isProcessCanceld(exportinProcess))
                                            return;*@

                                        <td>
                                            <div style="width:@columnWidth%; font-size:@fontSizePx;">

                                                @if (item[key] is not null && item[key].GetType() == typeof(double))
                                                {
                                                    @string.Format(CultureInfo.InvariantCulture, "{0:n2}", @item[key])
                                                }
                                                @if (item[key] is not null && item[key].GetType() == typeof(DateTime))
                                                {
                                                    @string.Format(CultureInfo.InvariantCulture, "{0:dd/MM/yyyy hh:mm:ss}", @item[key])

                                                }
                                                else
                                                {
                                                    //@item[key]
                                                    @Html.Raw(item[key]);

                                                }
                                            </div>
                                        </td>
                                    }
                                </tr>
                            }
                        </tbody>
                    </table>

                    <hr style="  border: 1px solid black;" />
                    <div class="brk text-center"> Printed on: @DateTime.Now.ToString("dd/MM/yyyy hh:mm:ss") - Page :@((i / recordPerPage) + 1) /@(Math.Ceiling((double)length / recordPerPage)) - Printed By : @ViewData["user"]</div>
                }
            }
            _pdfHAndler.CancelProcess(exportinProcess);
        }

    </div>
       <script>
        // Function to adjust font size dynamically based on column width
        function adjustFontSize() {
            var tables = document.querySelectorAll("table");
            tables.forEach(function (table) {
                var columns = table.querySelectorAll("td");
                columns.forEach(function (column) {
                    var columnWidth = column.offsetWidth;
                    var newFontSize = columnWidth / 4;  // Adjust the factor based on your requirement
                    
                    // Set the new font size
                    column.querySelector(".dynamic-font").style.fontSize = newFontSize + "px";
                });
            });
        }

        window.onload = adjustFontSize;
        window.onresize = adjustFontSize;  // Recalculate when the window is resized
    </script>

</body>
</html>