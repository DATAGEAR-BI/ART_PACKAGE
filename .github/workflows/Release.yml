name: ART Release

on:
  push:
    branches:
      - main
      - ABK
      - MAIN_TEST
      - MIDB
      - TAWKELAT
  pull_request:
    branches:
      - main
      - ABK 

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup .NET
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: 6.x.x

      - name: Restore dependencies
        run: dotnet restore

      - name: List Folders
        run: ls

      - name: Build
        run: dotnet build --no-restore

      - name: Build and Publish
        run: dotnet publish -c Release -o ./Release

      - name: Check jq Installation
        run: |
          jq --version

      - name: Validate and Extract Data from JSON
        id: extract_data
        run: |
            # Remove comments (//) and trim spaces from JSON
            content=$(sed '/^\s*\/\//d' "${{ github.workspace }}/ART_PACKAGE/appsettings.json" | sed 's/#.*$//' | tr -d '\r')

            # Save cleaned content to a new file
            echo "$content" > cleaned_appsettings.json
    
            # Validate cleaned JSON
            if ! jq . cleaned_appsettings.json > /dev/null 2>&1; then
                echo "Invalid JSON format. Exiting."
                exit 1
            fi
    
            # Extract data
            version=$(jq -r '.Version' cleaned_appsettings.json)
            release_name=$(jq -r '.ReleaseName' cleaned_appsettings.json)
    
            # Set outputs
            echo "VERSION=$version" >> $GITHUB_ENV
            echo "RELEASE_NAME=$release_name" >> $GITHUB_ENV


      - name: Check for existing release
        id: check_release
        run: |
          existing_tag=$(curl -s \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ env.VERSION }} \
            | jq -r '.tag_name')
          if [ "$existing_tag" = "${{ env.VERSION }}" ]; then
            echo "Release with this tag already exists."
            echo "release_exists=true" >> $GITHUB_ENV
          else
            echo "release_exists=false" >> $GITHUB_ENV
          fi

      - name: Create or Update Release
        id: release
        if: env.release_exists == 'false'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.VERSION }}
          release_name: ${{ env.RELEASE_NAME }}
          body_path: ${{ github.workspace }}/Release_Note.md
          draft: false
          prerelease: false

      - name: Copy ReleaseNote To Release Folder
        run: cp Release_Note.md ./Release

      - name: Zip folder
        run: |
          zip -r Release.zip ./Release

      - name: Upload Release Artifact
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.release.outputs.upload_url }}
          asset_path: ${{ github.workspace }}/Release.zip
          asset_name: Release.zip
          asset_content_type: application/zip
