name: ART Release

on:
  push:
    branches:
      - main
      - ABK
  pull_request:
    branches:
      - main
      - ABK 

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup .NET
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: 6.x.x

      - name: Restore dependencies
        run: dotnet restore

      - name: Read value from appsettings.json
        id: read-settings
        run: |
            import json

            # Load appsettings.json
            with open('${{ github.workspace }}/ART_PACKAGE/appsettings.json', 'r') as file:
                appsettings = json.load(file)

            # Access the desired value (replace 'key' with the actual key)
            value = appsettings['Version']

            echo "The value is $value"

      - name: Set environment variable
        run: echo "APP_SETTINGS_VALUE=${{ steps.read-settings.outputs.value }}" >> $GITHUB_ENV

      - name: Build
        run: dotnet build --no-restore

      - name: Build and Publish
        run: dotnet publish -r win-x64 --self-contained true -c Release -o ./Release


      

      - name: Get Version and Tag From Code
        id: set_ver
        run: |
              content=`cat ${{ github.workspace }}/ART_PACKAGE/appsettings.json`
              # the following lines are only required for multi line json
              content="${content//'%'/'%25'}"
              content="${content//$'\n'/'%0A'}"
              content="${content//$'\r'/'%0D'}"
              # end of optional handling for multi line json
              echo "::set-output name=packageJson::$content"
              echo "${{fromJson(steps.set_ver.outputs.packageJson)}}"
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          tag_name: ${{fromJson(steps.set_ver.outputs.packageJson).Version}}
          release_name: Release v1.0.2
          body_path: ${{ github.workspace }}/Release_Note.md
          draft: false
          prerelease: false
          
      - name: Zip folder
        run: |
          zip -r Release.zip ./Release
          
      - name: Upload Release Artifact
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ github.workspace }}/Release.zip
          asset_name: Release.zip # Change the name as needed
          asset_content_type: application/zip
