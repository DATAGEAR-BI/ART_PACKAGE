name: ART Release

on:
  push:
    branches:
      - main
      - ABK
  pull_request:
    branches:
      - main
      - ABK 
  workflow_dispatch:  # Allow manual triggers

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup .NET
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: 6.x.x

      - name: Restore dependencies
        run: dotnet restore

      - name : List Folders
        run : ls
      - name: Build
        run: dotnet build --no-restore

      - name: Build and Publish
        run: dotnet publish -c Release -o ./Release


      

      - name: Get Version and Tag From Code
        id: set_ver
        run: |
              content=`cat ${{ github.workspace }}/ART_PACKAGE/appsettings.json`
              # the following lines are only required for multi line json
              content="${content//'%'/'%25'}"
              content="${content//$'\n'/'%0A'}"
              content="${content//$'\r'/'%0D'}"
              # end of optional handling for multi line json
              echo "::set-output name=appsettings::$content"
              echo "${{ steps.set_ver.outputs.appsettings }}"

      - name: Get Base Version
        id: base_version
        run: |
          base_version=$(jq -r '.Version' ${{ github.workspace }}/ART_PACKAGE/appsettings.json)
          echo "::set-output name=base_version::$base_version"

      - name: Get Latest Release
        id: latest_release
        run: |
          latest_tag=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases" \
            | jq -r 'sort_by(.created_at) | last(.[]).tag_name')
          echo "::set-output name=latest_tag::$latest_tag"

      - name: Determine Final Version
        id: final_version
        run: |
          base_version="${{ steps.base_version.outputs.base_version }}"
          latest_tag="${{ steps.latest_release.outputs.latest_tag }}"

          if [ "$latest_tag" = "$base_version" ]; then
            # Assume semantic versioning and increment the patch number (e.g., 1.0.0 -> 1.0.1)
            final_version=$(echo $latest_tag | awk -F'.' '{print $1 "." $2 "." $3+1}')
          else
            final_version="$base_version"
          fi
          echo "::set-output name=final_version::$final_version"


      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.final_version.outputs.final_version }}
          release_name: "Release for ${{ steps.final_version.outputs.final_version }}"
          body_path: ${{ github.workspace }}/Release_Note.md
          draft: false
          prerelease: false







      #- name: Create Release
      #  id: create_release
      #  uses: actions/create-release@v1
      #  env:
      #    GITHUB_TOKEN: ${{ github.token }}
      #  with:
      #    tag_name: ${{fromJson(steps.set_ver.outputs.appsettings).Version}}
      #    release_name: ${{fromJson(steps.set_ver.outputs.appsettings).ReleaseName}}
      #    body_path: ${{ github.workspace }}/Release_Note.md
      #    draft: false
      #    prerelease: false



          
      - name: Zip folder
        run: |
          zip -r Release.zip ./Release

          
      - name: Upload Release Artifact
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ github.workspace }}/Release.zip
          asset_name: Release.zip # Change the name as needed
          asset_content_type: application/zip
