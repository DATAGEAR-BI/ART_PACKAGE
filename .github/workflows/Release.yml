
name: ART Release

on:
  push:
    branches:
      - main
      - ABK
      - MAIN_TEST
      - MIDB
      - TAWKELAT
  pull_request:
    branches:
      - main
      - ABK 
  workflow_dispatch:  # Allow manual triggers

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup .NET
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: 6.x.x

      - name: Restore dependencies
        run: dotnet restore

      - name : List Folders
        run : ls
      - name: Build
        run: dotnet build --no-restore

      - name: Build and Publish
        run: dotnet publish -c Release -o ./Release



      

      - name: Get Version and Tag From Code
        id: set_ver
        run: |
              content=`cat ${{ github.workspace }}/ART_PACKAGE/appsettings.json`
              # the following lines are only required for multi line json
              content="${content//'%'/'%25'}"
              content="${content//$'\n'/'%0A'}"
              content="${content//$'\r'/'%0D'}"
              # end of optional handling for multi line json
              echo "::set-output name=appsettings::$content"
              echo "${{ steps.set_ver.outputs.appsettings }}"
      #- name: Create Release
      #  id: create_release
      #  uses: actions/create-release@v1
      #  env:
      #    GITHUB_TOKEN: ${{ github.token }}
      #  with:
      #    tag_name: ${{fromJson(steps.set_ver.outputs.appsettings).Version}}
      #    release_name: ${{fromJson(steps.set_ver.outputs.appsettings).ReleaseName}}
      #    body_path: ${{ github.workspace }}/Release_Note.md
      #    draft: false
      #    prerelease: false
      - name: Check for existing release
        id: check_release
        run: |
            version= ${{fromJson(steps.set_ver.outputs.appsettings).Version}}
            existing_tag=$(curl -s \
                -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                https://api.github.com/repos/${{ github.repository }}/releases/tags/$version \
                | jq -r '.tag_name')
            if [ "$existing_tag" = "$version" ]; then
                echo "Release with this tag already exists."
                echo "::set-output name=release_exists::true"
            else
                echo "::set-output name=release_exists::false"
            fi
          
      - name: Update or Create Release
        id: release
        if: steps.check_release.outputs.release_exists == 'true'
        run: echo "Updating existing release with tag ${{ env.VERSION }}"

      - name: Create a New Release
        id: create_release
        if: steps.check_release.outputs.release_exists == 'false'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{fromJson(steps.set_ver.outputs.appsettings).Version}}
          release_name: ${{fromJson(steps.set_ver.outputs.appsettings).ReleaseName}}
          body_path: ${{ github.workspace }}/Release_Note.md
          draft: false
          prerelease: false
  

      - name: Copy ReleaseNote To Release Folder
        run: cp Release_Note.md ./Release

      - name: Zip folder
        run: |
          zip -r Release.zip ./Release
          
      - name: Upload Release Artifact
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ github.workspace }}/Release.zip
          asset_name: Release.zip # Change the name as needed
          asset_content_type: application/zip
